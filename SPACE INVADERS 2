import pygame #bring in module to handle graphics, input, ect

pygame.init() #set up game
pygame.display.set_caption("space invaders!")
screen =  pygame.display.set_mode((800, 800)) #creates game screen
clock = pygame.time.Clock() #set up clock
gameover = False #variable to run our game loop

#player variables
xpos = 400
ypos = 750
moveLeft = False
moveRight = False
shoot = False




#game variables
timer = 0;
class Bullet:
    def __init__(self, xpos, ypos):
        self.xpos = xpos
        self.ypos = ypos
        self.isAlive = False
        
    def move(self,xpos, ypos):
        if self.isAlive == True:
            self.ypos-=5
        if self.ypos < 0:
            self.isAlive = False
            self.xpos = ypos
            self.ypos = ypos
                
    def draw(self):
        pygame.draw.rect(screen, (250, 250, 250), (self.xpos, self.ypos, 3, 20))
            
#instantate bullet object
bullet = Bullet(xpos+28, ypos)#create bullet object and pass player position
        
    
class Alien:
    
    def __init__(self, xpos, ypos):
        self.xpos = xpos
        self.ypos = ypos
        self.isAlive = True
        self.direction = 1
    def draw(self):
        if self.isAlive == True:
            pygame.draw.rect(screen, (250, 250, 250), (self.xpos, self.ypos, 40, 40))
        
    def move(self, time):
    
        
        #reset what direction you're moving every 8 moves:
        if time % 800 == 0:
            self.ypos += 100 #move down
            self.direction *=-1 #flip direction
            return 0 #resets timer to 0
        
        #move evry time the timer incresases by 100:
        if time % 100 == 0:
            self.xpos+=50*self.direction #move right
            
        return time #doesn't reset if first if statement hasn't executed!
    
    #goes here
    
    
    def collide(self, BulletX, BulletY):
        if self.isAlive:
            if BulletX > self.xpos:
                if BulletX < self.xpos + 40:
                    if BulletY < self.ypos + 40:
                        if BulletY > self.ypos:
                            print("hit!")
                            self.isAlive = False 
                            return False
          
   
                        
        return True
                
         
class Walls:
    
    def __init__(self, xpos, ypos):
        self.xpos = xpos
        self.ypos = ypos
        self.numHits = 0
    def draw(self):
        if self.numHits ==0:
            pygame.draw.rect(screen, (250, 250, 20), (self.xpos, self.ypos, 30, 30))
        if self.numHits ==1:
            pygame.draw.rect(screen, (150, 150, 10), (self.xpos, self.ypos, 30, 30))
        if self.numHits ==2:
            pygame.draw.rect(screen, (50, 50, 0), (self.xpos, self.ypos, 30, 30))
            
    def collide(self, BulletX, BulletY):
        if self.numHits < 3:
            if BulletX > self.xpos:
                if BulletX < self.xpos + 40:
                    if BulletY < self.ypos + 40:
                        if BulletY > self.ypos:
                            print("hit!")
                            self.numHits += 1
                            return False
        return True

class missile:
    def __init__ (self):
        self.xpos = -10
        self.ypos = -10
        self.isAlive = False
        
    def move(self,xpos, ypos):
        if self.isAlive == True:
            self.ypos+=5
        if self.ypos > 800:
            self.isAlive = False
            self.xpos = -10
            self.ypos = -10
       
armada = [] #create empty list
for i in range (4): #HANDLES ROWS
    for j in range (9): #handles columns
        armada.append(Alien(j*60+50, i*50+50)) #push Alien objects into list
        
walls = []
for k in range (4):
    for i in range (2):
        for j in range (3):
            walls.append(Walls(j*30+200*k+50, i*30+600))
            
missiles = []
for i in range (10):
    missiles.append(missile())

while not gameover: #GAME LOOP#################################################################################
    clock.tick(60) #FPS
    timer += 1
    #Input Section------------------------------------------------------------
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            gameover = True #quit game if x is pressed in top corner
            
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_LEFT:
                moveLeft = True
            if event.key == pygame.K_RIGHT:
                moveRight = True
            if event.key == pygame.K_SPACE:
                shoot = True
        elif event.type == pygame.KEYUP:
            if event.key == pygame.K_LEFT:
                moveLeft = False     
            if event.key == pygame.K_RIGHT:
                moveRight = False
            if event.key == pygame.K_SPACE:
                shoot = False
        
         
    
    #pysics section-------------------------------------------------
                
                
    
    for i in range (len(armada)):
        timer = armada[i].move(timer)
    #shoot bullet
    if shoot == True:
        bullet.isAlive = True
            
    if bullet.isAlive == True:
        bullet.move(xpos+28, ypos)
        if bullet.isAlive == True:
                
            for i in range (len(armada)):
                bullet.isAlive = armada[i].collide(bullet.xpos, bullet.ypos)
                if bullet.isAlive == False:
                    break
                
        #shoot walls
                
        if bullet.isAlive == True:
                
            for i in range (len(walls)):
                bullet.isAlive = walls[i].collide(bullet.xpos, bullet.ypos)
                if bullet.isAlive == False:
                    break
        
    else:
         bullet.xpos = xpos + 28
         bullet.ypos = ypos
         
        chance = random.randrange(100)
        if chance < 2:
            #print("missle drop!") #for testing
            pick = random.randrange(len(armada))
             if armada[pick].isAlive == True:
                for i in range(len(missiles)):
                    if missiles[i].isAlive == False:
                        missiles[i].isAlive == True
                        missiles[i].xpos = armada[pick].xpos+5
                        missiles[i].ypos = armada[pick].ypos
                        break
                          
                         
            
        
    #check variables from the input section
    if moveLeft == True:
        vx =- 3

    elif moveRight == True:
        vx = 3
    else:
        vx = 0
        
        
            
    #update player position
    xpos += vx
    
    
    
    #RENDER Section---------------------------------------------------------------------------------------------
    
    
    screen.fill((0,0,0)) #wipe screen so it doesn't smear
    if bullet.isAlive == True:
        bullet.draw()
        
   
    pygame.draw.rect(screen, (34, 139, 34), (xpos, 750, 60, 20)) #draw player
    pygame.draw.rect(screen, (34, 139, 34), (xpos + 11, 743, 40, 20)) #draw player
    pygame.draw.rect(screen, (34, 139, 34), (xpos + 22, 738, 20, 20)) #draw player
    
    #draw all aliend in list:
    
    for i in range (len(armada)):
        armada[i].draw()
        
    for i in range (len(walls)):
        walls[i].draw()
    pygame.display.flip() #this flips the buffer (memory) where stuff has been "drawn" to a actual screen
    
#end game loop################################################################################################
    
pygame.quit()
